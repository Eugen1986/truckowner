import os
import asyncio
import logging
import json
from datetime import datetime

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Try to import telegram modules with fallback
TELEGRAM_AVAILABLE = False
try:
    from telegram import Update, Bot
    from telegram.ext import Application, CommandHandler, ContextTypes
    from telegram.constants import ParseMode
    TELEGRAM_AVAILABLE = True
    logger.info("Telegram modules imported successfully")
except ImportError as e:
    logger.warning(f"Telegram modules not available: {e}")

# Global bot instance
trucking_bot = None

def initialize_bot():
    """Initialize the bot instance"""
    global trucking_bot
    if not TELEGRAM_AVAILABLE:
        logger.warning("Telegram bot cannot be initialized - modules not available")
        return False
    
    try:
        trucking_bot = TruckingBot()
        logger.info("Telegram bot initialized successfully")
        return True
    except Exception as e:
        logger.error(f"Failed to initialize Telegram bot: {e}")
        return False

async def send_application_to_telegram(form_data, files):
    """Send application data to Telegram bot subscribers"""
    global trucking_bot
    if not TELEGRAM_AVAILABLE:
        logger.info("Telegram not available - skipping notification")
        return False
        
    if trucking_bot:
        try:
            await trucking_bot.send_application_to_subscribers(form_data, files)
            return True
        except Exception as e:
            logger.error(f"Error sending application to Telegram: {e}")
            return False
    else:
        logger.warning("Telegram bot not initialized")
        return False

def run_bot_polling():
    """Run the bot in polling mode (for development/testing)"""
    if not TELEGRAM_AVAILABLE:
        logger.error("Cannot run bot polling - Telegram modules not available")
        return
        
    global trucking_bot
    if not trucking_bot:
        initialize_bot()
    
    if trucking_bot:
        application = trucking_bot.setup_application()
        application.run_polling(allowed_updates=Update.ALL_TYPES)

# Only define TruckingBot class if telegram modules are available
if TELEGRAM_AVAILABLE:
    class TruckingBot:
        def __init__(self):
            self.bot_token = os.environ.get('TELEGRAM_BOT_TOKEN')
            if not self.bot_token:
                raise ValueError("TELEGRAM_BOT_TOKEN environment variable is required")
            
            self.bot = Bot(token=self.bot_token)
            self.subscribers = set()  # Store subscriber chat IDs
            self.subscribers_file = 'subscribers.json'
            self.load_subscribers()
        
        def load_subscribers(self):
            """Load subscribers from file"""
            try:
                if os.path.exists(self.subscribers_file):
                    with open(self.subscribers_file, 'r') as f:
                        data = json.load(f)
                        self.subscribers = set(data.get('subscribers', []))
            except Exception as e:
                logger.error(f"Error loading subscribers: {e}")
                self.subscribers = set()
        
        def save_subscribers(self):
            """Save subscribers to file"""
            try:
                with open(self.subscribers_file, 'w') as f:
                    json.dump({'subscribers': list(self.subscribers)}, f)
            except Exception as e:
                logger.error(f"Error saving subscribers: {e}")
        
        async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
            """Handle /start command"""
            chat_id = update.effective_chat.id
            self.subscribers.add(chat_id)
            self.save_subscribers()
            
            welcome_message = """
üöõ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π –≥—Ä—É–∑–æ–≤–∏–∫–æ–≤!

–≠—Ç–æ—Ç –±–æ—Ç –±—É–¥–µ—Ç —É–≤–µ–¥–æ–º–ª—è—Ç—å –≤–∞—Å –æ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö –æ—Ç –≤–æ–¥–∏—Ç–µ–ª–µ–π.
–ö–æ–≥–¥–∞ –∫—Ç–æ-—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É –Ω–∞ —Å–∞–π—Ç–µ, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:
- –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∏—Ç–µ–ª—è
- –í—Å–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã

–ö–æ–º–∞–Ω–¥—ã:
/start - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
/stop - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
"""
            await update.message.reply_text(welcome_message)
        
        async def stop_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
            """Handle /stop command"""
            chat_id = update.effective_chat.id
            if chat_id in self.subscribers:
                self.subscribers.remove(chat_id)
                self.save_subscribers()
                await update.message.reply_text("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö.")
            else:
                await update.message.reply_text("‚ÑπÔ∏è –í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
        
        async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
            """Handle /status command"""
            chat_id = update.effective_chat.id
            if chat_id in self.subscribers:
                await update.message.reply_text("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö.")
            else:
                await update.message.reply_text("‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏.")
        
        async def send_application_to_subscribers(self, form_data, files):
            """Send new application to all subscribers"""
            if not self.subscribers:
                logger.info("No subscribers to notify")
                return
            
            # Format the message
            message = f"""
üöõ **–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç –≤–æ–¥–∏—Ç–µ–ª—è**

üë§ **–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:**
‚Ä¢ –ò–º—è: {form_data.get('full_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {form_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}
‚Ä¢ Email: {form_data.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}

üìÑ **–î–æ–∫—É–º–µ–Ω—Ç—ã –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã:**
{len(files)} —Ñ–∞–π–ª(–æ–≤)

‚è∞ –í—Ä–µ–º—è –ø–æ–¥–∞—á–∏: {datetime.now().strftime('%d.%m.%Y %H:%M')}
"""
            
            # Document names mapping
            document_names = {
                'drivers_license': '–í–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ CDL',
                'medical_certificate': '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ DOT',
                'social_security': '–ö–∞—Ä—Ç–æ—á–∫–∞ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è',
                'vehicle_registration': '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞',
                'insurance_certificate': '–°—Ç—Ä–∞—Ö–æ–≤–æ–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç',
                'ifta_permit': '–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ IFTA',
                'mc_authority': 'MC Authority'
            }
            
            # Send to all subscribers
            for chat_id in self.subscribers.copy():
                try:
                    # Send the main message
                    await self.bot.send_message(
                        chat_id=chat_id,
                        text=message,
                        parse_mode=ParseMode.MARKDOWN
                    )
                    
                    # Send each file
                    for file_key, file_obj in files.items():
                        if file_key in document_names:
                            try:
                                file_obj.seek(0)  # Reset file pointer
                                await self.bot.send_document(
                                    chat_id=chat_id,
                                    document=file_obj,
                                    caption=f"üìÑ {document_names[file_key]}"
                                )
                            except Exception as e:
                                logger.error(f"Error sending file {file_key} to {chat_id}: {e}")
                    
                except Exception as e:
                    logger.error(f"Error sending message to subscriber {chat_id}: {e}")
                    # Remove invalid chat IDs
                    if "blocked" in str(e).lower():
                        self.subscribers.discard(chat_id)
                        self.save_subscribers()
        
        def setup_application(self):
            """Setup the telegram application with handlers"""
            application = Application.builder().token(self.bot_token).build()
            
            # Add command handlers
            application.add_handler(CommandHandler("start", self.start_command))
            application.add_handler(CommandHandler("stop", self.stop_command))
            application.add_handler(CommandHandler("status", self.status_command))
            
            return application
else:
    # Create empty TruckingBot class when telegram is not available
    class TruckingBot:
        def __init__(self):
            raise ValueError("Telegram bot functionality is not available - python-telegram-bot package not properly installed")